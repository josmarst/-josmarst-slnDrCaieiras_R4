@model atribuicaoAulas.Models.RegisterViewModel
@{
    ViewBag.Title = "Register";
    var municipio = ViewBag.municipio;
}

@using (Html.BeginForm("Register", "Account", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()
    @*<hr />*@
    @*@Html.ValidationSummary("", new { @class = "text-danger" })*@
    <div class="panel panel-default ">
        <!-- Topo -->
        <div class="panel-heading">
            <h2>Cadastro de Usuário</h2>
            <span class="tools pull-right">  </span>
        </div>
        <hr />
        @Html.Raw(TempData["msg"])
        <div class="form-group">
            @Html.LabelFor(m => m.CPF, new { @class = "col-md-2 control-label" })
            <div class="col-md-5">
                @Html.TextBoxFor(m => m.CPF, new { @class = "form-control somenteNumero", placeholder = "CPF Somente Números", maxlength = "11" })
                @Html.ValidationMessageFor(model => model.CPF, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Nome, new { @class = "col-md-2 control-label" })
            <div class="col-md-5">
                @Html.TextBoxFor(m => m.Nome, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.email, new { @class = "col-md-2 control-label" })
            <div class="col-md-5">
                @Html.TextBoxFor(m => m.email, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.email, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelForModel("Perfil", new { @class = "col-md-2 control-label" })
            <div class="col-md-5">
                @Html.DropDownList("idPerfil", (SelectList)ViewBag.ViewBagPerfil, "--  Selecione  --", new { @class = "form-control selectpicker show-tick", @data_live_search = "true", @id = "drpPerfil" })
                @Html.ValidationMessageFor(model => model.idperfil, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelForModel("Município", new { @class = "col-md-2 control-label" })
            <div class="col-md-5">
                @Html.DropDownList("idMunicipio", (SelectList)ViewBag.ViewBagMunicipios, "--  Selecione  --", new { @class = "form-control selectpicker show-tick", @data_live_search = "true", @id = "drpMunicipios" })  @*, @onchange = "carregaEscolas(this.value)"*@
                @Html.ValidationMessageFor(model => model.idMunicipio, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelForModel("Escola", new { @class = "col-md-2 control-label" })
            <div class="col-md-5">
                @Html.DropDownList("idEscola", (SelectList)ViewBag.ViewBagEscolas, "--  Selecione  --", new { @class = "form-control selectpicker show-tick", @data_live_search = "true", @id = "drpEscolas" })
                @Html.ValidationMessageFor(model => model.idEscola, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Password, new { @class = "col-md-2 control-label" })
            <div class="col-md-5">
                @Html.TextBox("Password", "123abc", new { @class = "form-control", @readonly = "readonly" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.ConfirmPassword, new { @class = "col-md-2 control-label", @readonly = "readonly", @hidden = "hidden" })
            <div class="col-md-5">
                @Html.TextBox("ConfirmPassword", "123abc", new { @class = "form-control", @readonly = "readonly", @hidden = "hidden" })
            </div>
        </div>
        <div id="divMessage" class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <h5 class="text-danger">A senha deverá ser alterada no primeiro acesso.</h5>
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-1">
                <input type="submit" class="btn btn-primary btn-large" value="Salvar" />
            </div>
            <div class="col-md-1">
                <p> <a href="/Account/Pesquisar" style="visibility:visible" title="Pesquisar" class="btn btn-primary btn-large">Pesquisar</a></p>
            </div>
            <div class="col-md-1">
                <p> <a href="/Account/Sair" style="visibility:visible" title="Sair" class="btn btn-primary btn-large">Sair</a></p>
            </div>
        </div>

    </div>
}

<script src="https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js"></script>
<script src="@Url.Content("~/Scripts/jquery-1.10.2.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.unobtrusive-ajax.js")" type="text/javascript"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
<script src="@Url.Content("~/Scripts/bootstrap.min.js")" type="text/javascript"></script>

<script>

    $("#drpMunicipios").change(function () {
        $.ajax({
            type: "POST",
            url: "/Escola/RetornarEscolas",
            data: { ID: $("#drpMunicipios").val() },
            dataType: "json",

            success: function (response) {
                var myObject = JSON.parse(response);
                $("#drpEscolas").empty();
                $("#drpEscolas").append('<option value="">--  Selecione  --</option>');

                for (var i = 0; i < myObject.length; i++) {
                    $("#drpEscolas").append('<option value="' + myObject[i].Value + '">' + myObject[i].Text + '</option>');
                };
            }
        });
    });

    $(document).ready(function () {
        $(".somenteNumero").bind("keyup blur focus", function (e) {
            e.preventDefault();
            var expre = /[^\d]/g;
            $(this).val($(this).val().replace(expre, ''));
        });
    });

</script>
